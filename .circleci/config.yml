version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  "https://kvdb.io/Aw1rU8A5covfR2S62P1Hed/migration_<< parameters.workflow_id >>")
            # Logic for reverting the database state
            if [[ $SUCCESS == 1 ]];
            then
              # if node is not installed, install node 13
              if ! command -v node &> /dev/null
              then
                sudo apt update
                sudo apt install snapd
                sudo snap install node --classic --channel=13/stable
              fi
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi  
orbs:
  node: circleci/node@5.1.0

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-modules]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-modules
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-modules]
      - run: 
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-modules
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-modules]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [backend-modules]
     - run:
        name: Test back-end
        command: |
          cd backend
          npm run test
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-modules]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm update minimist --depth 4
            npm update loader-utils --depth 2
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-modules]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      - run:
          name: Create backend stack
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --template-file .circleci/files/backend.yml \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Create frontend stack
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --template-file .circleci/files/frontend.yml \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Query for the backend ec2 dns name and append it to the inventory.txt file
          command: |
            aws cloudformation describe-stacks \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query "Stacks[0].Outputs[?OutputKey=='PublicDNS'].OutputValue" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
  configure-infrastructure:
    docker:
      - image: cimg/python:3.11.5
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "52:fe:53:5f:b2:90:5d:26:0d:d2:2c:e5:b6:e2:a3:da"
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install ansible
          command: |
            python3 -m pip install --user ansible
            ansible --version
      - run: 
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-modules]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/Aw1rU8A5covfR2S62P1Hed/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-modules
  deploy-frontend:
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query "Stacks[0].Outputs[?OutputKey=='PublicIP'].OutputValue" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - node/install:
          node-version: '13.8'
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            export FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" \
              --output text)
            aws s3 sync dist/ s3://${FRONTEND_BUCKET} --delete
  deploy-backend:
    docker:
      - image: cimg/python:3.11.5
    steps:
      - checkout
      - run: 
          name: Print current directory
          command: |
            ls -la
      - run: 
          name: Print backend
          command: |
            cd backend && ls -la
      - attach_workspace:
          at: .circleci/ansible
      - add_ssh_keys:
          fingerprints:
            - "52:fe:53:5f:b2:90:5d:26:0d:d2:2c:e5:b6:e2:a3:da"
      - run:
          name: Install ansible
          command: |
            python3 -m pip install --user ansible
            ansible --version
      - run:
          name: Install zip and zip backend
          command: |
            # sudo apt-get install zip
            zip backend -r backend
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run: 
          name: Install aws cli
          when: on_fail
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      - run:
          name: Wait for 10 seconds
          command: |
            sleep 10
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query "Stacks[0].Outputs[?OutputKey=='PublicIP'].OutputValue" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl --retry 3 --connect-timeout 30 "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export FRONTEND_URL=$(aws cloudformation describe-stacks \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" \
              --output text)
            echo "FRONTEND_URL = ${FRONTEND_URL}"
            if curl -s "$FRONTEND_URL" | grep "Welcome"
            then
              # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cloudfront-update:
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      - run:
          name: Get old workflow id and store it a temporary file
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo "${OldWorkflowID}" > .circleci/old_workflow_id.txt
      - persist_to_workspace:
          root: .circleci
          paths:
            - old_workflow_id.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name StartingStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
  cleanup:
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      - attach_workspace:
          at: .circleci
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat .circleci/old_workflow_id.txt)
            echo OldWorkflowID: "${OldWorkflowID}"

            # if current workflow doesn't contain the old workflow id, delete the old frontend and backend stacks
            if [[ ! "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              echo "---Deleting old stacks---"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              export FRONTEND_BUCKET=udapeople-${OldWorkflowID}
              echo "--Emptying bucket: ${FRONTEND_BUCKET}--"
              aws s3 rm "s3://${FRONTEND_BUCKET}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo "---Done deleting old stacks---"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          filters:
            branches:
              only: master
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update: 
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update
